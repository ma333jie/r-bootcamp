rta <- read.table("../data/RTAData.csv", sep = ",", head = TRUE)
rta[1:5, 1:5]
dim(rta)
gap <- read.csv(file.path('..', 'data', 'gapminder-FiveYearData.csv'))
View(gap)
View(gap)
gap[1:5,]
gap[-1,]
tail(gap, 1)
Greatgdp<- gap$gdpPercap > 50000
length(Greatgdp)
Greatgdp
sum(Greatgdp,Greatgdp == True)
sum(Greatgdp,Greatgdp == TRUE)
Greatgdp[Greatgdp>= 50000] <- NA
#1) Extract the 5th row from the gapminder dataset.
gap <- read.csv(file.path('..', 'data', 'gapminder-FiveYearData.csv'))
gap[1:5,]
#2) Extract the last row from the gapminder dataset.
tail(gap, 1)
#3) Count the number of gdpPercap values greater than 50000 in the gapminder dataset.
Greatgdp<- gap$gdpPercap > 50000
sum(Greatgdp,Greatgdp == TRUE)
#4) Set all of the gdpPercap values greater than 50000 to NA. You should probably first copy the `gap` object and work on the copy so that the dataset is unchanged (or just read the data into R again afterwards to get a clean copy).
GreatgdpMute <=gap$gdpPercap
GreatgdpMute <- NA
paste(gap$country[1],gap$year[1],sep = " ")
A <- paste(gap$country[1],gap$year[1],sep = " ")
type(A)
class(A)
paste('haha', 1, sept" ")
class(1)
class((toString(1)))
toString(1)
rows =toString(nrows(gap))
toPrint <- paste('There are ',rows, 'rows in the dataset')
nrows(gaps)
length(gaps)
length(gap)
length(gap[:,1])
length(gap[,1])
rows =toString(length(gap[,1]))
toPrint <- paste('There are ',rows, 'rows in the dataset')
toPrint
as.character(3)
lastRow <-gap[,1]
lastRow
lastRow <-gap[1,]
lastRow
lastRow <-gap[-1,]
lastRow
lastRow <-gap[-1]
lastRow
gapsub<-gap[gap$lifeExp >75 & gap$gdpPercap<10000,]
length(gapsub[,1])
# include any code here you don't want to show up in the document,
# e.g. package and dataset loading
library(foreign)
library(fields)
if(!('modules' %in% unlist(strsplit(getwd(), split = '/')))) setwd('modules')
gap <- read.csv(file.path('..', 'data', 'gapminder-FiveYearData.csv'), stringsAsFactors = FALSE)
gap2007 <- gap[gap$year == 2007, ]
gdpTotal <- gap$gdpPercap * gap$pop
gdpSubset <- gap2007$gdpPercap[1:10]
gdpSubset >= 30000
vec1 <- rnorm(5)
vec2 <- rnorm(5)
vec1 > vec2
vec1 == vec2
vec1 != vec2
## careful:
vec1 = vec2
identical(vec1, vec2)
## using 'or'
gdpSubset >= 100000 | gdpSubset <= 1000
## using 'and'
gap$gdpPercap[1:10] >= 100000 & gap$continent[1:10] == "Asia"
vec10 <- sample(1:10, 10, replace = TRUE)
vec3 <- sample(1:10, 3, replace = TRUE)
vec5 <- sample(1:10, 5, replace = TRUE)
vec10
vec3
vec5
vec10 + vec5
vec10 + vec3
vals <- rnorm(1000)
chi2vals <- vals^2
chi2_df1000 <- sum(chi2vals)
# imagine if the code above were a loop, or three separate loops
vals <- rnorm(1e6)
system.time(trunc <- ifelse(vals > 0, vals, 0))
system.time(vals <- vals * (vals > 0))
tmp <- as.character(gap$year)
gap$year2 <- substring(tmp, 3, 4)
head(gap$year2)
A <- matrix(1:9, 3)
B <- matrix(seq(4,36, by = 4), 3)
A + B
A + B[ , 1]
A * B
A * B[ , 1]
A %*% B[ , 1]
A %*% B
identical(t(A)%*%A, crossprod(A))
## next 3 lines generate a positive definite matrix
library(fields)
times <- seq(0, 1, length = 100)
R <- exp(-rdist(times) / 0.2) # a correlation matrix
######################################################
e <- eigen(R)
range(e$values)
e$vectors[ , 1]
sv <- svd(R)
U <- chol(R)
devs <- rnorm(100)
Rinvb <- solve(R, devs)  # R^{-1} b
Rinv <- solve(R) # R^{-1} -- try to avoid this
vals <- 0
n <- 50000
system.time({
for(i in 1:n)
vals <- c(vals, i)
})
n <- 50000
system.time({
vals <- rep(0, n)
# alternatively: vals <- as.numeric(NA); length(vals) <- n
for(i in 1:n)
vals[i] <- i
})
vals <- list(); length(vals) <- n
head(vals)
mat <- matrix(rnorm(100*1000), nr = 100)
row_min <- apply(mat, MARGIN = 1, FUN = min)
col_max <- apply(mat, MARGIN = 2, FUN = max)
row_mean <- rowMeans(mat)
col_sum <- colSums(mat)
myList <- list(rnorm(3), rnorm(3), rnorm(5))
lapply(myList, min)
sapply(myList, min)
sapply(1:10, function(x) x^2)
tbl <- table(gap$country, gap$continent)
tbl
rowSums(tbl)
all(rowSums(tbl) == 12)
subsets <- split(gap,  gap$year)
length(subsets)
class(gap$year)
gdp
gap
countryyear <-c(gap$country,gap$year)
tbl<-table(countryyear)
tb1<-table(countryyear)
columnSum(tb1)
tb1<-table(countryyear)
columnSums(tb1)
tb1<-table(countryyear)
columnsSums(tb1)
tb1<-table(countryyear)
colSums(tb1)
head(tb1)
tb1<-table(gap$country,gap$continent)
head(tb1)
tb1<-table(gap$countinent,gap$county)
tb1
tab1
tb1
tb1<-table(gap$countinent,gap$county)
rowsum(tb1)
tb1<-table(gap$county,gap$continent)
tb1<-table(gap$county,gap$continent)
clear
tb1<-table(gap$county,gap$continent)
rm(tbl)
tb1<-table(gap$county,gap$continent)
length(gap$country)
length(gap$continent)
tb1<-table(gap$country,gap$continent)
rowsum(tb1)
tb1<-table(gap$country,gap$continent)
colSums(tb1)
tmp <- gap[ , -which(names(gap) == "continent")]
View(tmp)
View(tmp)
View(gap)
View(gap)
which(names(gap) == "continent")
sapply(gap,is.na(gap))
cut(gap$gdpPercap, breaks = seq(0,1000000, by = 20000))
table(cut(gap$gdpPercap, breaks = seq(0,1000000, by = 20000)))
table(cut(gap$gdpPercap, breaks = seq(0,100000, by = 5000)))
myfun<-function(x){
sum(is.na(x))
}
myfun(gdpBin)
gdpBin <-cut(gap$gdpPercap, breaks = seq(0,100000, by = 5000))
myfun<-function(x){
sum(is.na(x))
}
myfun(gdpBin)
sapply(gap, myfun)
tb1<-table(gap$country,gap$continent[gap$continent == 2007])
colSums(tb1)
tb1<-table(gap$country[gap$year == 2007],gap$continent[gap$year == 2007])
colSums(tb1)
help(read)
help("read.csv")
install.packages('dplyr')
library(dplyr)
getwd()
year_country_gdp<-gap%>%select(year, country, gdpPercap)
head(year_country_gdp<-gap)
head(year_country_gdp)
year_country_gdp_dplyr <- select(gap, year, country, gdpPercap)
year_country_gdp <- gap %>% select(year, country, gdpPercap)
head(year_country_gdp)
gap$mean.continent.GDP <- NA
system.time(mean(rnorm(1e7)))
x <- [1,2, 3, -1, -2, -3]
x <- [1, 2, 3, -1, -2, -3]
x <- matrix(1, 2, 3, -1, -2, -3)
x <- matrix(, 2 3 -1 -2 -3)
x <- matrix(1 2 3 -1 -2 -3)
x <- c(1 2 3 -1 -2 -3)
x <- c(1, 2, 3, -1, -2, -3)
class(x)
A <- matrix(1)
A
A<-matrix(1,2)
A
A<-matrix(2,2)
A
A<-matrix(2)
A
x <- c(1, 5, 4, 9, 0)
x
x <- 1,2,3
x<- 1;
x<-1,2;
x<-1 2;
xmatrix(,15,2)
matrix(,15,2)
matrix(,3,2)
matrix(1,3,2)
libray(tidyr)
library(tidyr)
getwd()
nums<-c ((1,2,3),(4,5,6))
nums<- c((1,2,3),(4,5,6))
nums<- c(1,2,3)
nums
nums<-c(nums,nums)
nums
#object practice for R
rboot2018 <- list(month = 'August', year = 2015,
instructor = 'Paciorek', attendance = 100)
class(rboot2018) <- "workshop
""
"
#object practice for R
rboot2018 <- list(month = 'August', year = 2015,
instructor = 'Paciorek', attendance = 100)
class(rboot2018) <- "workshop"
rboot2018
class(rboot2018)
#object practice for R
rboot2018 <- list(month = 'August', year = 2015,
instructor = 'Paciorek', attendance = 100)
#workshop is the name of the class
class(rboot2018) <- "workshop"
rboot2018 <- list(month = 'August', year = 2015,
instructor = 'Paciorek', attendance = 100)
class(rboot2018)
library(RSQLite)
db<-dbConnect(SQlite(),dbname = " ../data/stackoverflow-2016.db")
db<-dbConnect(SQLite(),dbname = " ../data/stackoverflow-2016.db")
getwd()
db<-dbConnect(SQLite(),dbname = " ../data/stackoverflow-2016.db")
db<-dbConnect(SQLite(),dbname = " ../data/stackoverflow-2016.db")
db<- dbConnect(SQLite(),dbname = " ../data/stackoverflow-2016.db")
db<- dbConnect(SQLite(),dbname = " ../data/stackoverflow-2016.db")
